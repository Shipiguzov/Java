package Lessons.lesson5;

import org.w3c.dom.ls.LSOutput;

import java.util.Arrays;
import java.util.Objects;

public class StringLesson {
    public static void main(String[] args) {
        // char - —Å–∏–º–≤–æ–ª—å–Ω—ã–π —Ç–∏–ø
        // char - –æ–¥–∏–Ω 16 –±–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª Unicode
        // 0 .. 65536 (\u0000 –¥–æ \uffff - –≤ 16—Ç–∏—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
        // –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å:
        char char1 = 'J';// —Å–∞–º —Å–∏–º–≤–æ–ª –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        char char2 = 74;// –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞
        char char3 = '\u0044';// —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        System.out.print(char1);// J
        System.out.print(char2);// J
        System.out.print(char3);// D

        System.out.println("\n–°—Ç—Ä–æ–∫–∏");
        // –°—Ç—Ä–æ–∫–∞ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç—Ä–æ–∫–∏ - –æ–±—ä–µ–∫—Ç—ã (—Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø) –∫–ª–∞—Å—Å–∞ String
        // –°—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è:
        //      –≤ ""
        //      –∏—Å–ø–æ–ª—å–∑—É—è new String() - –∏–º –ø–æ–ª—å–∑—É—é—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        // –°—Ç—Ä–æ–∫–∏ –Ω–µ–ª—å—è –∏–∑–º–µ–Ω–∏—Ç—å, –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        // –í—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã,
        // –Ω–∞–ø—Ä–∏–º–µ—Ä System.out.println("\n–°—Ç—Ä–æ–∫–∏"); —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã String

        char[] jjdChars = {'\u004A', '\u004A', '\u0044'};
        String jjdString = new String(jjdChars);
        jjdString = "\u004A\u004A\u0044";
        System.out.println(jjdChars); // JJD
        System.out.println(jjdString.length()); // 3
        System.out.println(jjdString.codePoints().count()); // 3

        char[] frogChars = {'\uD83D', '\uDC38'};
        String frogString = new String(frogChars);
        frogString = "\uD83D\uDC38";
        // 1101 1000 0011 1101 .. 1101 1100 0011 1000
        System.out.println(frogString); // üê∏
        System.out.println(frogString.length()); // 2
        System.out.println(frogString.codePoints().count()); // 1

        // –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª Unicode –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω
        // –æ–¥–Ω–∏–º –∏–ª–∏ –ø–∞—Ä–æ–π (—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è –ø–∞—Ä–∞) —á–∞—Ä–æ–≤

        // —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–æ java 9: –º–∞—Å—Å–∏–≤ char[] –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-16, –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π char –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–≤—É–º—è –±–∞–π—Ç–∞–º–∏

        // —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å java 9: –º–∞—Å—Å–∏–≤ byte[] + –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-16 –∏–ª–∏ LATIN1

        System.out.println("–ü—É–ª —Å—Ç—Ä–æ–∫");
        // –ø—É–ª —Å—Ç—Ä–æ–∫ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ heap –ø–∞–º—è—Ç–∏) —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ø–∏—é –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞.
        // –°—Ç—Ä–æ–∫–∏ –≤ –ø—É–ª–µ —Å—Ç—Ä–æ–∫ –Ω–µ –¥—É–±–∏—Ä—É—é—Ç—Å—è
        // –ò–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø—É–ª —Å—Ç—Ä–æ–∫
        String string1 = "–°—Ç—Ä–æ–∫–∞";
        String string2 = "–°—Ç—Ä–æ–∫–∞";
        String string3 = new String("–°—Ç—Ä–æ–∫–∞"); // —Å—Ç—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ –≤ –ø—É–ª–µ –ø–∞–º—è—Ç–∏. –û–±—ä–µ–∫—Ç—ã —Ç–∞–º –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∏ –∑–∞–Ω–∏–º–∞—Ç—å –ø–∞–º—è—Ç—å

        System.out.println(string1 == string2); // true //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
        System.out.println(string1 == string3); // false

        System.out.println("–ú–µ—Ç–æ–¥ intern()");
        String internStr = string3.intern(); // string3 —Ç–∞–∫ –∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ —Ç–∞–º, –≥–¥–µ –∏ –±—ã–ª
        System.out.println(string1 == internStr); // true
        System.out.println(string3 == internStr); // false
        System.out.println(string2 == internStr); // true

        System.out.println("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫");
        // equals()
        string1 = "–°—Ç—Ä–æ–∫–∞";
        string2 = "–°—Ç—Ä–æ–∫–∞";
        System.out.println(string1.equals(string2)); // true
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string1)); // false
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equalsIgnoreCase(string1)); // true

        // –≤–∞—Ä–∏–∞–Ω—Ç "—Å—Ç—Ä–æ–∫–∞".equals(string1); - –ª—É—á—à–µ, —á–µ–º
        // string1.equals("—Å—Ç—Ä–æ–∫–∞");

        String nullString = null;
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(nullString)); // false
        // System.out.println(nullString.equals("—Å—Ç—Ä–æ–∫–∞")); // java.lang.NullPointerException

        System.out.println(nullString == null); // true
        System.out.println(Objects.nonNull(nullString)); // false
        System.out.println(Objects.isNull(nullString)); // true

        // –¥–∞–Ω –º–∞—Å—Å–∏–≤ animals {"–∫–æ—Ç", "–ø—ë—Å", "–≥—É—Å—å"}
        // —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –±–æ–ª—å—à–µ, —á–µ–º —É anumals –≤ 2 —Ä–∞–∑–∞)
        // –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–Ω–∏—è–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ animals

        String[] animals = {"–∫–æ—Ç", "–ø—ë—Å", "–≥—É—Å—å"};
        String[] resultArray = new String[animals.length * 2];
        for (int i = 0; i < resultArray.length; i++) {
            resultArray[i] = animals[(int) (Math.random() * animals.length)];
        }
        System.out.println(Arrays.toString(resultArray));

        System.out.println("–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫");
        string1 = "Java";
        string2 = "Python";

        // 1 –≤–∞—Ä–∏–∞–Ω—Ç: +
        System.out.println(string1 + " :: " + string2);

        // 2 –≤–∞—Ä–∏–∞–Ω—Ç: —Å—Ç—Ä–æ–∫–∞.concat(" :: ")
        String concatStr = string1.concat(" :: ").concat(string2);
        System.out.println(concatStr);

        // 3 –≤–∞—Ä–∏–∞–Ω—Ç: String.join(—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, —Å—Ç—Ä–æ–∫–∞1, —Å—Ç—Ä–æ–∫–∞2, ..., —Å—Ç—Ä–æ–∫–∞ N);
        concatStr = String.join(" :: ", string1, string2);
        System.out.println(concatStr);

        System.out.println("–ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏");
        concatStr = "";
        for (int i = 0; i < 10; i++) {
            concatStr += i + " ";
        }
        System.out.println(concatStr);
        // –∫–æ–Ω–∫–∞—Ç–∏–Ω–∞—Ü–∏—è –≤ —Ü–∏–∫–ª–µ - —Ä–µ—Å—É—Ä—Å–æ—ë–º–∫–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è

        // StringBuilder - —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º
        // StringBuffer - —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–µ–µ, –Ω–æ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º

        StringBuilder sb = new StringBuilder(string1);
        sb.append(" :: ").append("Python");
        concatStr = sb.toString();
        System.out.println(concatStr);

        sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            sb.append(i).append(" ");
        }
        concatStr = sb.toString();
        System.out.println(concatStr);

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Unicode
        // –°: 1057 —Å: 1089
        System.out.println();

        System.out.println("—Å—Ç—Ä–æ–∫–∞".compareTo("—Å—Ç—Ä–æ–∫–∞")); // 0
        System.out.println("—Å—Ç—Ä–æ–∫–∞".compareTo("–°—Ç—Ä–æ–∫–∞")); // 32
        System.out.println("–°—Ç—Ä–æ–∫–∞".compareTo("—Å—Ç—Ä–æ–∫–∞")); // -32
        System.out.println("—Å—Ç—Ä–æ–∫–∞".compareToIgnoreCase("–°—Ç—Ä–æ–∫–∞")); // 0

        // start / end
        string1 = "JJD";
        System.out.println(string1.startsWith("JJ")); // true
        System.out.println(string1.startsWith("D", 2)); // true (–µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, —Ç–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false)
        System.out.println(string1.endsWith("d")); // false

        // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        string1 = string1.toLowerCase();
        string1 = string1.toUpperCase();

        // –∑–∞–º–µ–Ω–∞
        string1 = "JJD";
        string1 = string1.replace("J", "!");
        System.out.println(string1);
        string1 = "JJD";
        string1 = string1.replaceAll("J", "!");// –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å regular expressions
        System.out.println(string1);
        string1 = "JJD";
        System.out.println(string1.replaceFirst("J", "!"));// –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å regular expressions

        System.out.println(string1.contains("D")); // –∏—â–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ. true / false

        string1 = "Java Python PHP";
        String[] strings = string1.split(" ");
        System.out.println(Arrays.toString(strings));

        // —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã trim / strip / stripLeading / stripTrailing
        System.out.println("\u3000");// "  " - –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª
        System.out.println("\u0020");// " " - –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
        // trim - —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ u0020
        // strip (J11) - —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        // stripLeading (J11) - —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏)
        // stripTrailing (J11) - —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏)

        // printf - –û–ß–ï–ù–¨ —Ä–µ—Å—É—Ä—Å–æ—ë–º–∫–∞—è!
        System.out.printf("—Å—Ç—Ä–æ–∫–∞ '%s'\n", " qwe ".trim());
        System.out.printf("—Å—Ç—Ä–æ–∫–∞ '%f'\n", 11.6);
        System.out.printf("—Å—Ç—Ä–æ–∫–∞ '%d'\n", 566);


    }
}
